import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import json
import time
import sqlite3
from datetime import datetime
import random

TOKEN = "8158402995:AAElflm2ymC1JBen6z7ABHyZqiP2eWCs0-U" #–¢–æ–∫–µ–Ω –±–æ—Ç–∞
CRYPTO_BOT_TOKEN = "323794:AANOP8noXtnVKNazN5cDkxgEako6uldXmSU" # api CryptoBot
API_URL = "https://pay.crypt.bot/api/"
ADMIN_IDS = [7943900933] #id –ê–¥–º–∏–Ω–æ–≤, –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
LOG_CHANNEL_ID = -1002262162343 # –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∫—É–¥–∞ –ø–æ—Å—Ç—è—Ç—Å—è –ª–æ–≥–∏ –ø–æ –¥–µ–ø–∞—Ö –∏ –≤—ã–≤–æ–¥–∞—Ö
PAYMENTS_CHANNEL_ID = -1002283537111 # –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –∫—É–¥–∞ –ø–æ—Å—Ç—è—Ç—Å—è –≤—ã–ø–ª–∞—Ç—ã
CHANNEL_ID = -1002479355645 #id –∏–≥—Ä–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ 
CHANNEL_LINK = "https://t.me/LzU0WYeDYH02OTXr" #URL - –∏–≥—Ä–æ–≤–æ–π –∫–∞–Ω–∞–ª 

bot = telebot.TeleBot(TOKEN)

def init_db():
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance REAL DEFAULT 0.0,
        vip_progress INTEGER DEFAULT 0,
        oborot REAL DEFAULT 0.0,
        games_played INTEGER DEFAULT 0,
        account_age INTEGER DEFAULT 0,
        registration_date TEXT DEFAULT CURRENT_TIMESTAMP,
        is_admin INTEGER DEFAULT 0,
        referrer_id INTEGER DEFAULT NULL
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        type TEXT,
        amount REAL,
        date TEXT,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pending_invoices (
        invoice_id TEXT PRIMARY KEY,
        user_id INTEGER,
        amount REAL,
        date TEXT,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS mines_games (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        mines_count INTEGER,
        bet_amount REAL,
        board_state TEXT,
        current_multiplier REAL DEFAULT 1.0,
        move_count INTEGER DEFAULT 0
    )
    ''')
    conn.commit()
    conn.close()

init_db()

class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.balance = 0.0
        self.vip_progress = 0
        self.oborot = 0.0
        self.games_played = 0
        self.account_age = 0
        self.is_admin = False
        self.referrer_id = None
        self.load_from_db()

    def load_from_db(self):
        conn = sqlite3.connect('bd.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (self.user_id,))
        user_data = cursor.fetchone()
        if user_data:
            self.balance = user_data[1]
            self.vip_progress = user_data[2]
            self.oborot = user_data[3]
            self.games_played = user_data[4]
            self.account_age = (datetime.now() - datetime.strptime(user_data[6], '%Y-%m-%d %H:%M:%S')).days if user_data[6] else 0
            self.is_admin = bool(user_data[7])
            self.referrer_id = user_data[8]
        conn.close()

    def save_to_db(self):
        conn = sqlite3.connect('bd.db')
        cursor = conn.cursor()
        cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, balance, vip_progress, oborot, games_played, account_age, is_admin, referrer_id)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            self.user_id, self.balance, self.vip_progress, self.oborot, 
            self.games_played, self.account_age, int(self.is_admin), self.referrer_id
        ))
        conn.commit()
        conn.close()
    
    def add_transaction(self, tx_type, amount):
        conn = sqlite3.connect('bd.db')
        cursor = conn.cursor()
        cursor.execute('''
        INSERT INTO transactions (user_id, type, amount, date)
        VALUES (?, ?, ?, ?)
        ''', (
            self.user_id, tx_type, amount, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        )
        conn.commit()
        conn.close()

def get_user(user_id):
    user = User(user_id)
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
    exists = cursor.fetchone()
    conn.close()
    if not exists:
        user.save_to_db()
    return user

def create_invoice(amount, user_id):
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    data = {
        "asset": "USDT",
        "amount": str(amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–µ–ø",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/your_bot",
        "payload": str(user_id)
    }
    response = requests.post(f"{API_URL}createInvoice", headers=headers, json=data)
    if response.status_code == 200:
        result = response.json()
        if result.get('ok'):
            conn = sqlite3.connect('bd.db')
            cursor = conn.cursor()
            cursor.execute('''
            INSERT INTO pending_invoices (invoice_id, user_id, amount, date)
            VALUES (?, ?, ?, ?)
            ''', (
                result['result']['invoice_id'], user_id, amount, 
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            )
            conn.commit()
            conn.close()
        return result
    return None

def check_invoice(invoice_id):
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN
    }
    response = requests.get(f"{API_URL}getInvoices?invoice_ids={invoice_id}", headers=headers)
    return response.json() if response.status_code == 200 else None

def create_check(amount, user_id):
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    data = {
        "asset": "USDT",
        "amount": str(amount),
        "pin_to_user_id": user_id
    }
    try:
        response = requests.post(f"{API_URL}createCheck", headers=headers, json=data, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Error creating check: {response.status_code}, {response.text}")
            return None
    except Exception as e:
        print(f"Exception in create_check: {str(e)}")
        return None

def log_deposit(user_id, amount):
    log_message = f"""üîî –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!

üí∏ –°—É–º–º–∞ –¥–µ–ø–∞: {amount:.2f} USDT
üÜî –ê–π–¥–∏ –∏–≥—Ä–æ–∫–∞: {user_id}"""
    bot.send_message(LOG_CHANNEL_ID, log_message, parse_mode='HTML')

def log_withdrawal(user_id, amount, check_url):
    log_message = f"""<blockquote>üîî –ù–æ–≤—ã–π –≤—ã–≤–æ–¥!</blockquote>

<blockquote>üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount:.2f} USDT
üÜî –ê–π–¥–∏ –∏–≥—Ä–æ–∫–∞: {user_id}</blockquote>

<blockquote>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {check_url}</blockquote>"""
    bot.send_message(PAYMENTS_CHANNEL_ID, log_message, parse_mode='HTML')

def calculate_referral_bonus(referrer_id, deposit_amount):
    bonus_percentage = 0.1  
    bonus_amount = deposit_amount * bonus_percentage
    
    referrer = get_user(referrer_id)
    referrer.balance += bonus_amount
    referrer.save_to_db()
    referrer.add_transaction('referral_bonus', bonus_amount)

    try:
        bot.send_message(referrer_id, f"<blockquote>üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å, –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: {bonus_amount:.2f} USDT</blockquote>\n<blockquote>–í–∞—à –±–∞–ª–∞–Ω—Å: {referrer.balance:.2f} USDT</blockquote>", parse_mode='HTML')
    except:
        pass
    
    return bonus_amount

def get_referral_link(user_id):
    return f"https://t.me/illusionwin_bot?start=ref_{user_id}"

def get_referral_count(user_id):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users WHERE referrer_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

def check_subscription(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"Error checking subscription: {e}")
        return False

@bot.callback_query_handler(func=lambda call: call.data == 'check_subscription')
def check_subscription_callback(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start(call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user = get_user(message.from_user.id)
    if not user.is_admin and message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üí∞ –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='admin_add_balance'),
        InlineKeyboardButton("üí∏ –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='admin_remove_balance')
    )
    keyboard.row(
        InlineKeyboardButton("üë§ –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data='admin_user_info'),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data='admin_bot_stats')
    )
    
    admin_text = """
<blockquote>üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b></blockquote>

<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
üí∞ –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å - –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
üí∏ –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å - —É–¥–∞–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üë§ –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</blockquote>
    """
    
    bot.send_message(message.chat.id, admin_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def admin_callback(call):
    user = get_user(call.from_user.id)
    if not user.is_admin and call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if call.data == 'admin_add_balance':
        msg = bot.send_message(call.message.chat.id, 
                              "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n–ü—Ä–∏–º–µ—Ä: <code>123456789 10.5</code>", 
                              parse_mode='HTML')
        bot.register_next_step_handler(msg, process_admin_add_balance)
    
    elif call.data == 'admin_remove_balance':
        msg = bot.send_message(call.message.chat.id, 
                              "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n–ü—Ä–∏–º–µ—Ä: <code>123456789 10.5</code>", 
                              parse_mode='HTML')
        bot.register_next_step_handler(msg, process_admin_remove_balance)
    
    elif call.data == 'admin_user_info':
        msg = bot.send_message(call.message.chat.id, 
                              "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>", 
                              parse_mode='HTML')
        bot.register_next_step_handler(msg, process_admin_user_info)
    
    elif call.data == 'admin_bot_stats':
        show_bot_stats(call.message)

def process_admin_add_balance(message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError
        
        user_id = int(parts[0])
        amount = float(parts[1])
        
        if amount <= 0:
            bot.send_message(message.chat.id, "<blockquote>‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π</blockquote>")
            return
        
        user = get_user(user_id)
        user.balance += amount
        user.oborot += amount
        user.add_transaction('admin_add', amount)
        user.save_to_db()
        
        bot.send_message(message.chat.id, f"<blockquote>ü•∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\nüí∏ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª {amount:.2f}$\nüéÅ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f}$</blockquote>")
        
        try:
            bot.send_message(user_id, f"<blockquote>üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º {amount:.2f}$</blockquote>\n<blockquote>–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT</blockquote>")
        except:
            pass
    
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°—É–º–º–∞</code>", parse_mode='HTML')

def process_admin_remove_balance(message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError
        
        user_id = int(parts[0])
        amount = float(parts[1])
        
        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        
        user = get_user(user_id)
        
        if user.balance < amount:
            bot.send_message(message.chat.id, f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT")
            return
        
        user.balance -= amount
        user.add_transaction('admin_remove', amount)
        user.save_to_db()
        
        bot.send_message(message.chat.id, f"<blockquote>‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ {amount:.2f} USDT\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT</blockquote>")
        
        try:
            bot.send_message(user_id, f"<blockquote>‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω—è–ª —Å –≤–∞—Å {amount:.2f} USDT\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT</blockquote>")
        except:
            pass
    
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°—É–º–º–∞</code>", parse_mode='HTML')

def process_admin_user_info(message):
    try:
        user_id = int(message.text)
        user = get_user(user_id)
        
        conn = sqlite3.connect('bd.db')
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM transactions WHERE user_id = ?', (user_id,))
        tx_count = cursor.fetchone()[0]
        cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "deposit"', (user_id,))
        total_deposits = cursor.fetchone()[0] or 0
        cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "withdraw"', (user_id,))
        total_withdrawals = cursor.fetchone()[0] or 0
        conn.close()
        
        info_text = f"""
<blockquote>üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b> #{user_id}</blockquote>

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT
‚≠ê –í–∞—à —Ä—É–±–µ–∂: {user.vip_progress}%
üìä –û–±–æ—Ä–æ—Ç: {user.oborot:.2f} USDT
üéÆ –°—ã–≥—Ä–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: {user.games_played}
‚è≥ –ê–∫–∫–∞—É–Ω—Ç—É: {user.account_age} –¥–Ω–µ–π

üí≥ –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {total_deposits:.2f} USDT
üí∏ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: {total_withdrawals:.2f} USDT
üìù –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {tx_count}

üÜî ID: <code>{user_id}</code>
        """
        
        bot.send_message(message.chat.id, info_text, parse_mode='HTML')
    
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

def show_bot_stats(message):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM transactions')
    active_users = cursor.fetchone()[0]
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE type = "deposit"')
    total_deposits = cursor.fetchone()[0] or 0
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE type = "withdraw"')
    total_withdrawals = cursor.fetchone()[0] or 0
    conn.close()
    
    stats_text = f"""
<blockquote>üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b></blockquote>

<blockquote>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}</blockquote>

<blockquote>üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_deposits:.2f} USDT
‚¨ÜÔ∏è –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {total_deposits:.2f} USDT
‚¨áÔ∏è –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: {total_withdrawals:.2f} USDT</blockquote>
    """
    
    bot.send_message(message.chat.id, stats_text, parse_mode='HTML')

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    
    if not check_subscription(user_id):
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK),
            InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='check_subscription')
        )
        bot.send_message(
            message.chat.id,
            "<b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return

    user = get_user(message.from_user.id)
    referrer_id = None
    
    if message.text and len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1].split('_')[1])
        except ValueError:
            pass
    
    if referrer_id and user.user_id != referrer_id:
        referrer = get_user(referrer_id)
        if user.referrer_id is None:
            user.referrer_id = referrer_id
            user.save_to_db()

    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å", callback_data='mini_games'),
        InlineKeyboardButton("üí¨ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã", callback_data='game_chats')
    )
    keyboard.row(
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='show_profile'),
        InlineKeyboardButton("üë• –†–µ—Ñ. –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')
    )
    keyboard.row(
        InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", url=f't.me/Adrean_support')
    )
    
    welcome_text = """
<blockquote>ü§ù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Illusion Win</b></blockquote>
    """
    
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, "üëã")
    try:
        photo = open('img/illusion.jpg', 'rb')
        bot.send_photo(message.chat.id, photo, caption=welcome_text, reply_markup=keyboard, parse_mode='HTML')
    except FileNotFoundError:
        bot.send_message(message.chat.id, welcome_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'show_profile')
def show_profile_callback(call):
    user = get_user(call.from_user.id)
    
    profile_text = f"""
<blockquote>üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b> #{user.user_id}</blockquote>

<blockquote>üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance:.2f} USDT
‚≠ê <b>VIP –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {user.vip_progress}%
üìä <b>–û–±–æ—Ä–æ—Ç:</b> {user.oborot:.2f} USDT
üéÆ <b>–°—ã–≥—Ä–∞–Ω–æ —Å—Ç–∞–≤–æ–∫:</b> {user.games_played}
‚è≥ <b>–ê–∫–∫–∞—É–Ω—Ç—É:</b> {user.account_age} –¥–Ω–µ–π</blockquote>
    """
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit'),
        InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data='withdraw')
    )
    keyboard.row(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='statistics'),
        InlineKeyboardButton("üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data='transactions')
    )
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
    )

    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, profile_text, parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'profile')
def profile_callback(call):
    user = get_user(call.from_user.id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit'),
        InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data='withdraw')
    )
    keyboard.row(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='statistics'),
        InlineKeyboardButton("üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data='transactions')
    )
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
    )
    
    profile_text = f"""
<blockquote>üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b> #{user.user_id}</blockquote>

<blockquote>üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance:.2f} USDT
‚≠ê <b>VIP –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {user.vip_progress}%
üìä <b>–û–±–æ—Ä–æ—Ç:</b> {user.oborot:.2f} USDT
üéÆ <b>–°—ã–≥—Ä–∞–Ω–æ —Å—Ç–∞–≤–æ–∫:</b> {user.games_played}
‚è≥ <b>–ê–∫–∫–∞—É–Ω—Ç—É:</b> {user.account_age} –¥–Ω–µ–π</blockquote>
    """
    
    try:
        bot.edit_message_text(profile_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, profile_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'mini_games')
def mini_games_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üöÄ –ú–∏–Ω—ã", callback_data='mines'),
        InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data='dice'),
    )
    keyboard.row(
        InlineKeyboardButton("üõ†üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ªüõ†", callback_data='button1'),
        InlineKeyboardButton("üõ†‚öΩ –§—É—Ç–±–æ–ªüõ†", callback_data='button2'),
    )
    keyboard.row(
        InlineKeyboardButton("üõ†üé∞ –°–ª–æ—Ç—ãüõ†", callback_data='button3'),
        InlineKeyboardButton("üõ†üéØ –î–∞—Ä—Ç—Åüõ†", callback_data='button4'),
    )
    keyboard.row(
        InlineKeyboardButton("üõ†üé≥ –ë–æ—É–ª–∏–Ω–≥üõ†", callback_data='button5'),
        InlineKeyboardButton("üõ†ü™®‚úÇÔ∏èüóí –ö–ù–ëüõ†", callback_data='button6'),
    )
    keyboard.row(
        InlineKeyboardButton("üõ†üé° –ö–æ–ª–µ—Å–æüõ†", callback_data='button7'),
        InlineKeyboardButton("üõ†üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞üõ†", callback_data='button8'),
    )
        
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
    )

    play_text = """
<blockquote>üéÆ <b>–ú–∏–Ω–∏-–∏–≥—Ä—ã</b></blockquote>

<blockquote>‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</blockquote>
    """
    bot.answer_callback_query(call.id)
    try:
        bot.edit_message_text(play_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, play_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'button1')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ üèÄ –ë–æ—É–ª–∏–Ω–≥, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'button2')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ ‚öΩ –§—É—Ç–±–æ–ª, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'button3')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ üé∞ –°–ª–æ—Ç—ã, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)
        
@bot.callback_query_handler(func=lambda call: call.data == 'button4')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ üéØ –î–∞—Ä—Ç—Å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'button5')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ üé≥ –ë–æ—É–ª–∏–Ω–≥, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'button6')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ ü™®‚úÇÔ∏èüóí –ö–ù–ë, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'button7')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ üé° –ö–æ–ª–µ—Å–æ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'button8')
def cdk_message(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "üõ† –ò–≥—Ä–∞ üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏‚Äº", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'deposit')
def deposit_callback(call):
    msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 0.1 USDT):</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, process_deposit_amount, call.from_user.id)

def process_deposit_amount(message, user_id):
    try:
        amount = float(message.text)
        if amount < 0.1:
            bot.send_message(message.chat.id, "<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 0.1 USDT!</b>", parse_mode='HTML')
            return
            
        user = get_user(user_id)
        invoice = create_invoice(amount, user_id)
        
        if invoice and invoice.get('ok'):
            invoice_data = invoice['result']
            
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_data['pay_url']),
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_invoice_{invoice_data["invoice_id"]}')
            )
            keyboard.row(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='profile')
            )
            
            invoice_text = f"""
<blockquote>üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b></blockquote>

<blockquote><b>–°—É–º–º–∞:</b> {amount:.2f} USDT
<b>–ê–¥—Ä–µ—Å:</b> <code>{invoice_data['pay_url']}</code></blockquote>

<blockquote>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"</blockquote>
            """
            
            bot.send_message(message.chat.id, invoice_text, reply_markup=keyboard, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!</b>", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('check_invoice_'))
def check_invoice_callback(call):
    invoice_id = call.data.split('_')[-1]
    
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM pending_invoices WHERE invoice_id = ?', (invoice_id,))
    invoice_data = cursor.fetchone()
    conn.close()
    
    if not invoice_data or invoice_data[0] != call.from_user.id:
        bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —Å—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
        return
    
    user = get_user(call.from_user.id)
    invoice_status = check_invoice(invoice_id)
    
    if invoice_status and invoice_status.get('ok'):
        invoice_data = invoice_status['result']['items'][0]
        
        if invoice_data['status'] == 'paid':
            amount = float(invoice_data['amount'])
            user.balance += amount
            user.oborot += amount
            user.add_transaction('deposit', amount)
            user.save_to_db()

            conn = sqlite3.connect('bd.db')
            cursor = conn.cursor()
            cursor.execute('DELETE FROM pending_invoices WHERE invoice_id = ?', (invoice_id,))
            conn.commit()
            conn.close()
            
            log_deposit(user.user_id, amount)

            if user.referrer_id:
                referral_bonus = calculate_referral_bonus(user.referrer_id, amount)
                bot.send_message(call.message.chat.id, f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {referral_bonus:.2f} USDT –±–æ–Ω—É—Å–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞!", parse_mode='HTML')
            
            success_text = f"""
<blockquote>‚úÖ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!</b></blockquote>

<blockquote><b>–ó–∞—á–∏—Å–ª–µ–Ω–æ:</b> {amount:.2f} USDT
<b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {user.balance:.2f} USDT</blockquote>
            """
            
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("üë§ –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
            )
            
            bot.edit_message_text(success_text, call.message.chat.id, call.message.message_id, 
                                 reply_markup=keyboard, parse_mode='HTML')
        else:
            bot.answer_callback_query(call.id, "‚ùå –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == 'withdraw')
def withdraw_callback(call):
    user = get_user(call.from_user.id)
    
    if user.balance < 0.5:
        bot.answer_callback_query(call.id, f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 0.5 USDT\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT", show_alert=True)
        return
        
    msg = bot.send_message(call.message.chat.id, f"<b><blockquote>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞</blockquote></b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, process_withdraw_amount, call.from_user.id)

def process_withdraw_amount(message, user_id):
    try:
        amount = float(message.text)
        user = get_user(user_id)
        
        if amount < 0.5:
            bot.send_message(message.chat.id, "<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 5 USDT!</b>", parse_mode='HTML')
            return
        if amount > user.balance:
            bot.send_message(message.chat.id, "<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!</b>", parse_mode='HTML')
            return
            
        check = create_check(amount, user_id)
        
        if check and check.get('ok'):
            check_data = check['result']
            pay_url = check_data.get('bot_check_url')
            
            if not pay_url:
                error_msg = "<b>–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>"
                error_msg += f"\n\n–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ API:\n<code>{json.dumps(check_data, indent=2)}</code>"
                bot.send_message(message.chat.id, error_msg, parse_mode='HTML')
                return
            
            user.balance -= amount
            user.add_transaction('withdraw', amount)
            user.save_to_db()
            
            log_withdrawal(user.user_id, amount, pay_url)

            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å", url=pay_url)
            )
            keyboard.row(
                InlineKeyboardButton("üë§ –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
            )
            
            withdraw_text = f"""
<blockquote>üéÅ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞!</b></blockquote>

<blockquote><b>–°—É–º–º–∞:</b> {amount:.2f} USDT
<b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è</blockquote>

<blockquote>üîî –ó–∞–±–µ—Ä–∏—Ç–µ —á–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</blockquote>
            """
            
            bot.send_message(message.chat.id, withdraw_text, reply_markup=keyboard, parse_mode='HTML')
        else:
            error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if check and not check.get('ok'):
                error_msg += f"\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {check.get('error', {}).get('code', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                if check.get('error', {}).get('name') == 'insufficient_balance':
                    error_msg = "–û—à–∏–±–∫–∞: –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            bot.send_message(message.chat.id, error_msg, parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'statistics')
def statistics_callback(call):
    user = get_user(call.from_user.id)
    
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "deposit"', (user.user_id,))
    total_deposits = cursor.fetchone()[0] or 0
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "withdraw"', (user.user_id,))
    total_withdrawals = cursor.fetchone()[0] or 0
    conn.close()
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='profile')
    )
    
    stats_text = f"""
<blockquote>üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞</b></blockquote>

<blockquote>üí∞ <b>–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç:</b> {user.oborot:.2f} USDT
‚¨ÜÔ∏è <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> {total_deposits:.2f} USDT
‚¨áÔ∏è <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> {total_withdrawals:.2f} USDT
üéÆ <b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä:</b> {user.games_played}
‚≠ê <b>VIP —É—Ä–æ–≤–µ–Ω—å:</b> {user.vip_progress}%</blockquote>
    """
    
    try:
        bot.edit_message_text(stats_text, call.message.chat.id, call.message.message_id, 
                             reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, stats_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'transactions')
def transactions_callback(call):
    user = get_user(call.from_user.id)
    
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT type, amount, date FROM transactions WHERE user_id = ? ORDER BY date DESC LIMIT 10', (user.user_id,))
    transactions = cursor.fetchall()
    conn.close()
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='profile')
    )
    
    if not transactions:
        transactions_text = "<blockquote>üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b></blockquote>\n\n–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
    else:
        transactions_text = "<blockquote>üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b></blockquote>\n\n"
        for tx in transactions:
            icon = "‚¨áÔ∏è" if tx[0] == 'withdraw' else "‚¨ÜÔ∏è"
            transactions_text += f"{icon} {tx[0]} {tx[1]:.2f} USDT\n<code>{tx[2]}</code>\n\n"
    
    try:
        bot.edit_message_text(transactions_text, call.message.chat.id, call.message.message_id, 
                             reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, transactions_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'dice')
def dice_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üé≤ –ß–µ—Ç–Ω–æ–µ (x1.8)", callback_data='dice_even'),
        InlineKeyboardButton("üé≤ –ù–µ—á–µ—Ç–Ω–æ–µ (x1.8)", callback_data='dice_odd')
    )
    keyboard.row(
        InlineKeyboardButton("üé≤ –ë–æ–ª—å—à–µ 3 (x1.8)", callback_data='dice_more'),
        InlineKeyboardButton("üé≤ –ú–µ–Ω—å—à–µ 4 (x1.8)", callback_data='dice_less')
    )
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='mini_games')
    )

    dice_text = """
<blockquote>üé≤ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É</b></blockquote>
    """

    try:
        bot.edit_message_text(dice_text, call.message.chat.id, call.message.message_id,
                             reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, dice_text, reply_markup=keyboard, parse_mode='HTML')

def process_dice_bet(message, user_id, bet_type):
    try:
        amount = float(message.text)
        user = get_user(user_id)
        
        if amount <= 0:
            bot.send_message(message.chat.id, "<b>–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!</b>", parse_mode='HTML')
            return
        if amount > user.balance:
            bot.send_message(message.chat.id, "<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!</b>", parse_mode='HTML')
            return
        
        user.balance -= amount
        user.save_to_db()

        sent_msg = bot.send_dice(message.chat.id)
        time.sleep(3)
        dice_result = sent_msg.dice.value

        if bet_type == 'even':
            if dice_result % 2 == 0:
                win_amount = amount * 2
                multiplier = 1.8
                win = True
            else:
                win_amount = 0
                multiplier = 0
                win = False
        elif bet_type == 'odd':
            if dice_result % 2 != 0:
                win_amount = amount * 2
                multiplier = 1.8
                win = True
            else:
                win_amount = 0
                multiplier = 0
                win = False
        elif bet_type == 'more':
            if dice_result > 3:
                win_amount = amount * 1.5
                multiplier = 1.8
                win = True
            else:
                win_amount = 0
                multiplier = 0
                win = False
        elif bet_type == 'less':
            if dice_result < 4:
                win_amount = amount * 1.5
                multiplier = 1.8
                win = True
            else:
                win_amount = 0
                multiplier = 0
                win = False

        if win:
            user.balance += win_amount
            user.oborot += win_amount
            user.add_transaction('dice_win', win_amount)
            user.save_to_db()
            bot.send_message(message.chat.id, f"<blockquote>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</blockquote>\n<blockquote>üé≤ –í—ã–ø–∞–ª–æ {dice_result}</blockquote>\n<blockquote>üí∏ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f}$</blockquote>\n<blockquote>üçÄ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–±–µ–¥—ã: (x{multiplier})</blockquote>", parse_mode='HTML')
        else:
            user.add_transaction('dice_lose', -amount)
            user.save_to_db()
            bot.send_message(message.chat.id, f"<b>–í—ã–ø–∞–ª–æ {dice_result}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount:.2f} USDT!</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!</b>", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('dice_'))
def dice_bet_callback(call):
    bet_type = call.data.split('_')[1]
    msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, process_dice_bet, call.from_user.id, bet_type)

@bot.callback_query_handler(func=lambda call: call.data == 'mines')
def mines_callback(call):
    user = get_user(call.from_user.id)
    keyboard = InlineKeyboardMarkup()
    row1 = [InlineKeyboardButton(str(i), callback_data=f'mines_set_mines_{i}') for i in range(2, 7)]
    keyboard.add(*row1)
    keyboard.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='mini_games'))
    mines_text = f"""
<blockquote>üí£ <b>–ú–∏–Ω—ã</b></blockquote>

<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:</blockquote>
    """
    try:
        bot.edit_message_text(mines_text, call.message.chat.id, call.message.message_id,
                             reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, mines_text, reply_markup=keyboard, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith('mines_set_mines_'))
def mines_set_mines_callback(call):
    mines_count = int(call.data.split('_')[-1])
    user_id = call.from_user.id
    msg = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:</b>", parse_mode='HTML')
    bot.register_next_step_handler(msg, process_mines_bet_amount, user_id, mines_count, call.message.message_id)

def process_mines_bet_amount(message, user_id, mines_count, prev_message_id):
    try:
        bet_amount = float(message.text)
        user = get_user(user_id)

        if bet_amount <= 0:
            bot.send_message(message.chat.id, "<b>üò° –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π</b>", parse_mode='HTML')
            return
        if bet_amount > user.balance:
            bot.send_message(message.chat.id, "<b>üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ..</b>", parse_mode='HTML')
            return

        user.balance -= bet_amount
        user.save_to_db()
        user.add_transaction('mines_bet', -bet_amount)

        game_id = create_mines_game(user_id, mines_count, bet_amount)
        show_mines_game(prev_message_id, message.chat.id, user_id, game_id, mines_count, bet_amount)

    except ValueError:
        bot.send_message(message.chat.id, "<b>üò° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!</b>", parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        print(f"Error in process_mines_bet_amount: {e}")

def create_mines_game(user_id, mines_count, bet_amount):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    board_state = generate_mines_board(mines_count)
    cursor.execute('''
    INSERT INTO mines_games (user_id, mines_count, bet_amount, board_state)
    VALUES (?, ?, ?, ?)
    ''', (user_id, mines_count, bet_amount, json.dumps(board_state)))
    game_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return game_id

def generate_mines_board(mines_count):
    board = [[0 for _ in range(5)] for _ in range(5)]
    mines_placed = 0
    
    while mines_placed < mines_count:
        row = random.randint(0, 4)
        col = random.randint(0, 4)
        if board[row][col] == 0:
            board[row][col] = 1
            mines_placed += 1
    return board

def show_mines_game(prev_message_id, chat_id, user_id, game_id, mines_count, bet_amount):
    board_state, current_multiplier, move_count = get_mines_game_state(game_id)
    
    lose_probability = 0
    if move_count == 1:
        lose_probability = 0.10
    elif move_count == 2:
        lose_probability = 0.20
    elif move_count == 3:
        lose_probability = 0.30
    elif move_count == 4:
        lose_probability = 0.40
    elif move_count >= 5:
        lose_probability = 1.0

    keyboard = InlineKeyboardMarkup(row_width=5)
    for row in range(5):
        row_buttons = []
        for col in range(5):
            button_text = " "
            callback_data = f'mines_click_{row}_{col}_{game_id}'
            
            if board_state[row][col] == -1:
                is_mine = check_if_mine(board_state, row, col)
                button_text = "üí£" if is_mine else "üíé"
            
            elif board_state[row][col] == 2:
                 button_text = "üéÅ"
                 callback_data = 'noop'
                 
            row_buttons.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        keyboard.row(*row_buttons)
    
    keyboard.row(
        InlineKeyboardButton("üí∞ –ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏", callback_data=f'mines_take_{game_id}'),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='mini_games')
    )
    
    balance = get_user(user_id).balance
    
    multiplier_per_move = 1.0
    if mines_count == 2:
        multiplier_per_move = 1.04
    elif mines_count == 3:
        multiplier_per_move = 1.05
    elif mines_count == 4:
        multiplier_per_move = 1.055
    elif mines_count == 5:
        multiplier_per_move = 1.0625
    elif mines_count == 6:
        multiplier_per_move = 1.075
    
    game_text = f"""
<blockquote>üí£ <b>–ú–∏–Ω—ã</b></blockquote>

<blockquote>üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT
üí∏ –°—Ç–∞–≤–∫–∞: {bet_amount:.2f} USDT
‚≠ê –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{current_multiplier:.2f}</blockquote>
    """
    try:
        bot.edit_message_text(game_text, chat_id, prev_message_id, reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(chat_id, game_text, reply_markup=keyboard, parse_mode='HTML')

def get_mines_game_state(game_id):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT board_state, current_multiplier, move_count FROM mines_games WHERE id = ?', (game_id,))
    game_data = cursor.fetchone()
    conn.close()
    if not game_data:
        return None, 1.0, 0
    board_state = json.loads(game_data[0])
    current_multiplier = game_data[1]
    move_count = game_data[2]
    return board_state, current_multiplier, move_count

def update_mines_game_state(game_id, board_state, current_multiplier, move_count):
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('''
    UPDATE mines_games
    SET board_state = ?, current_multiplier = ?, move_count = ?
    WHERE id = ?
    ''', (json.dumps(board_state), current_multiplier, move_count, game_id))
    conn.commit()
    conn.close()

def check_if_mine(board_state, row, col):
    return board_state[row][col] == 1

@bot.callback_query_handler(func=lambda call: call.data.startswith('mines_click_'))
def mines_click_callback(call):
    row, col, game_id = map(int, call.data.split('_')[2:])
    user_id = call.from_user.id
    
    board_state, current_multiplier, move_count = get_mines_game_state(game_id)
    
    if board_state is None:
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    if board_state[row][col] == -1 or board_state[row][col] == 2:
        bot.answer_callback_query(call.id, "ü§ù –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
        return
        
    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT mines_count, bet_amount FROM mines_games WHERE id = ?', (game_id,))
    mines_count, bet_amount = cursor.fetchone()
    conn.close()

    lose_probability = 0
    if move_count + 1 == 1:
        lose_probability = 0.10
    elif move_count + 1 == 2:
        lose_probability = 0.20
    elif move_count + 1 == 3:
        lose_probability = 0.30
    elif move_count + 1 == 4:
        lose_probability = 0.40
    elif move_count + 1 >= 5:
        lose_probability = 1.0

    if random.random() < lose_probability:
        for r in range(5):
            for c in range(5):
                if board_state[r][c] == 1:
                    row, col = r, c
                    break
            else:
                continue
            break

    if check_if_mine(board_state, row, col):
        board_state[row][col] = -1
        update_mines_game_state(game_id, board_state, 1, move_count + 1)
        
        user = get_user(user_id)
        user.add_transaction('mines_lose', -bet_amount)
        user.save_to_db()
        
        bot.answer_callback_query(call.id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", show_alert=True)
        
        kb = InlineKeyboardMarkup()
        kb.row(InlineKeyboardButton("–†–µ—Å—Ç–∞—Ä—Ç", callback_data="mines"))
        try:
            bot.edit_message_text("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", call.message.chat.id, call.message.message_id, reply_markup=kb)
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(call.message.chat.id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", reply_markup=kb)

    else:
        board_state[row][col] = 2

        multiplier_per_move = 1.0
        if mines_count == 2:
            multiplier_per_move = 1.04
        elif mines_count == 3:
            multiplier_per_move = 1.05
        elif mines_count == 4:
            multiplier_per_move = 1.055
        elif mines_count == 5:
            multiplier_per_move = 1.0625
        elif mines_count == 6:
            multiplier_per_move = 1.075

        current_multiplier *= multiplier_per_move
        update_mines_game_state(game_id, board_state, current_multiplier, move_count + 1)

        show_mines_game(call.message.message_id, call.message.chat.id, user_id, game_id, mines_count, bet_amount)

@bot.callback_query_handler(func=lambda call: call.data.startswith('mines_take_'))
def mines_take_callback(call):
    game_id = int(call.data.split('_')[-1])
    user_id = call.from_user.id

    conn = sqlite3.connect('bd.db')
    cursor = conn.cursor()
    cursor.execute('SELECT bet_amount, current_multiplier, user_id FROM mines_games WHERE id = ?', (game_id,))
    bet_amount, current_multiplier, user_id_from_db = cursor.fetchone()
    conn.close()

    if user_id != user_id_from_db:
        return

    win_amount = bet_amount * current_multiplier
    user = get_user(user_id)
    user.balance += win_amount
    user.save_to_db()
    user.add_transaction('mines_win', win_amount)

    bot.answer_callback_query(call.id, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} USDT!", show_alert=True)
    kb = InlineKeyboardMarkup()
    kb.row(InlineKeyboardButton("–ú–∏–Ω—ã", callback_data="mines"))
    try:
        bot.edit_message_text(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} USDT", call.message.chat.id, call.message.message_id,reply_markup=kb)
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} USDT", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data == 'game_chats')
def game_chats_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üí¨ –ù–∞—à —á–∞—Ç", url='https://t.me/Hgy3pro7QdmMjNi')
    )
    keyboard.row(
        InlineKeyboardButton("üíé –ù–∞—à –∫–∞–Ω–∞–ª", url='https://t.me/newsXr45')
    )
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
    )
    
    chats_text = """
<blockquote>üîî <b>–ù–∞—à —á–∞—Ç –∏ –∫–∞–Ω–∞–ª</b></blockquote>

<blockquote>üí¨ –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç - –æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
üíé –ù–∞—à –∫–∞–Ω–∞–ª - –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</blockquote>
    """
    
    try:
        bot.edit_message_text(chats_text, call.message.chat.id, call.message.message_id,
                             reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, chats_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'referral')
def referral_callback(call):
    user = get_user(call.from_user.id)
    ref_link = get_referral_link(user.user_id)
    referral_count = get_referral_count(user.user_id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üì¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", url=f"https://t.me/share/url?url={ref_link}")
    )
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
    )
    
    ref_text = f"""
<blockquote>üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b></blockquote>

<blockquote>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!</blockquote>
<blockquote>üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code></blockquote>

<blockquote>üí∞ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: 0.00 USDT
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_count} </blockquote>
    """

    try:
        bot.edit_message_text(ref_text, call.message.chat.id, call.message.message_id,
                             reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, ref_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'help')
def help_callback(call):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üí≥ –§–∏–Ω–∞–Ω—Å—ã", callback_data='help_finance'),
        InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data='help_games')
    )
    keyboard.row(
        InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='help_referral'),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='help_stats')
    )
    keyboard.row(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
    )
    
    help_text = """
üÜò –¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏:
üí≥ –§–∏–Ω–∞–Ω—Å—ã - –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –∏ –≤—ã–≤–æ–¥–∞–º
üéÆ –ò–≥—Ä—ã - –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã - –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """

    try:
        bot.edit_message_text(help_text, call.message.chat.id, call.message.message_id,
                             reply_markup=keyboard, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException:
        bot.send_message(call.message.chat.id, help_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'back')
def back_callback(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    start(call.message)

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    user_id = message.from_user.id
    amount = float(message.successful_payment.total_amount) / 100
    user = get_user(user_id)
    user.balance += amount
    user.oborot += amount
    user.add_transaction('deposit', amount)
    user.save_to_db()
    bot.send_message(message.chat.id, f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount:.2f} USDT!</b>", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'noop')
def noop_callback(call):
    bot.answer_callback_query(call.id, "ü§ù –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
    
